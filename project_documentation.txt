# Image Color Fader - Complete Project Documentation

## Project Overview

The "Image Color Fader" is a sophisticated web-based image editing application that allows users to manipulate image colors with advanced features including transparency effects, color replacement, and tolerance-based color selection. The application features a dark-themed UI built with HTML, CSS, and JavaScript, utilizing Canvas API for image processing.

## Project Structure

### Files in the Project:
1. **index.html** - Main HTML structure (180 lines)
2. **styles.css** - CSS styling and responsive design (293 lines)
3. **script.js** - JavaScript functionality and image processing (539 lines)
4. **plan.md** - Development planning document (30 lines)

### Dependencies:
- **External**: Tailwind CSS (CDN)
- **Internal**: None (self-contained application)

## Core Functionality

### Primary Features:
1. **Image Upload and Display**
   - File input accepts image files
   - Canvas rendering with proper scaling
   - Resolution display

2. **Color Selection**
   - Click-to-pick colors from uploaded images
   - Real-time hex and RGB value display
   - Color swatch visualization
   - Copy-to-clipboard functionality

3. **Color Manipulation Modes**
   - **Transparency Mode**: Fade selected colors to transparent
   - **Color Replacement Mode**: Replace selected colors with chosen replacement color
   - **Tolerance Mode**: Select color ranges with adjustable tolerance strength
   - **Invert Selection**: Apply effects to all colors EXCEPT selected ones

4. **Advanced Effects**
   - **Edge Smoothing**: Anti-aliasing for smoother color transitions
   - **Opacity Control**: Gamma-corrected opacity for natural transparency
   - **Real-time Preview**: Live updates as controls are adjusted

5. **Performance Management**
   - Automatic performance monitoring
   - Real-time preview disabling for slow operations
   - Manual preview button for performance mode

6. **Export Functionality**
   - Download edited images as PNG
   - Apply changes to make current state the new base image

## User Interface Components

### Header Section:
- Application title: "Image Color Fader"
- Dark theme with cyan accent colors

### Main Content Area:
- **Left Panel (3/4 width)**: Image canvas and upload controls
- **Right Panel (1/4 width)**: Control panel (sticky positioning)

### Control Panel Sections:

1. **Preview Controls**
   - Real-time preview toggle
   - Manual preview button (shown in performance mode)

2. **Selected Color Display**
   - Color swatch preview
   - Hex value display with copy button
   - RGB value display with copy button
   - Image resolution display

3. **Mode Selection**
   - Color replacement toggle
   - Color picker (hidden when toggle off)
   - Replacement color hex display

4. **Opacity Control**
   - Slider (0-100%)
   - Gamma correction applied for natural feel

5. **Tolerance Settings**
   - Enable/disable tolerance mode
   - Strength slider (0-100) when enabled

6. **Selection Options**
   - Invert selection toggle
   - Applies effect to all colors except selection when enabled

7. **Edge Smoothing**
   - Enable/disable anti-aliasing
   - Smoothing factor slider (0.1-1.0) when enabled

### Action Buttons:
- **Upload Image**: Custom styled file input
- **Preview**: Manual preview (performance mode)
- **Reset**: Restore original image state
- **Apply**: Save current edits as new base image
- **Download**: Export edited image as PNG

## Technical Implementation

### Image Processing:
- Canvas API for pixel-level manipulation
- ImageData objects for efficient processing
- Perceptual color distance calculation (weighted RGB)
- Gamma correction for natural opacity curves

### Color Mathematics:
```javascript
// Perceptual color distance with human vision weights
function colorDistance(color1, color2) {
    const dr = color1.r - color2.r;
    const dg = color1.g - color2.g;
    const db = color1.b - color2.b;
    const rWeight = 0.3, gWeight = 0.59, bWeight = 0.11;
    return Math.sqrt(rWeight * dr * dr + gWeight * dg * dg + bWeight * db * db);
}
```

### Smoothing Algorithms:
- Multiple interpolation curve types based on smoothing factor
- Anti-aliasing for smooth color transitions

### Performance Optimization:
- ImageData caching for frequent operations
- Performance monitoring with automatic real-time disabling
- Efficient canvas operations with `willReadFrequently` context

## Event Handling

### Core Event Listeners:
- `imageUpload`: Load and display uploaded images
- `imageCanvas`: Color picking on click
- `opacitySlider`: Real-time filter updates
- `toleranceToggle`: Show/hide tolerance controls
- `toleranceStrengthSlider`: Adjust tolerance radius
- `invertSelectionToggle`: Toggle inversion mode
- `antiAliasingToggle`: Show/hide smoothing controls
- `smoothingFactorSlider`: Adjust smoothing intensity
- `resetButton`: Restore original image
- `downloadButton`: Export edited image
- `applyButton`: Save current state as new base
- `copyHexButton`/`copyRgbButton`: Copy color values
- `colorReplacementToggle`: Show/hide color picker
- `replacementColorPicker`: Update replacement color
- `realtimePreviewToggle`: Enable/disable live updates
- `previewButton`: Manual preview trigger
- `dismissWarning`: Hide performance warning

## Message System

### User Feedback:
- Toast-style message notifications
- Color-coded by type (success/error/info)
- Auto-dismiss after 5 seconds
- Positioned in top-left corner

## Responsive Design

### Breakpoints:
- Desktop: Full layout with side-by-side panels
- Mobile (< 640px): Stacked layout, full-width buttons
- Tablet (< 1280px): Adjusted spacing

## State Management

### Global Variables:
- `originalImage`: Source Image object
- `originalImageData`: Base image pixel data
- `selectedColor`: Currently selected RGB color
- `isRealtimePreviewEnabled`: Preview mode state
- `isPerformanceModeActive`: Performance optimization flag

### Control State:
All UI controls maintain their state and are reset appropriately when:
- New image is loaded
- Reset button is clicked
- Apply button saves current state

## Workflow

### Typical Usage:
1. **Upload Image**: User selects image file
2. **Pick Color**: Click on image to select target color
3. **Adjust Settings**: Modify opacity, tolerance, selection mode
4. **Preview Changes**: Real-time or manual preview
5. **Apply or Export**: Save changes or download result

### Advanced Workflow:
1. **Multi-layer Editing**: Apply changes, then select new colors on modified image
2. **Performance Mode**: Automatic fallback for large images
3. **Color Replacement**: Switch to replacement mode for color swapping
4. **Tolerance Selection**: Use tolerance mode for color range selection

## Error Handling

### User Feedback:
- File loading errors
- Clipboard copy failures
- Performance warnings
- Missing image notifications

### Graceful Degradation:
- Canvas fallback for non-image uploads
- Performance mode for slow operations
- Default states for all controls

## Future Enhancements (from plan.md)

### Planned Features:
1. **Background Image Support**
   - Upload second background image
   - Toggle background visibility
   - Export with layered background

2. **Interactive Background Manipulation**
   - Click and drag to move background
   - Scroll wheel scaling
   - Foreground edits remain unaffected

## Technical Specifications

### Browser Compatibility:
- Modern browsers with Canvas API support
- ES6+ JavaScript features
- CSS Grid and Flexbox support

### Performance Characteristics:
- Optimized for images up to 4K resolution
- Real-time processing for smaller images
- Automatic performance scaling for larger images
- Memory efficient with ImageData reuse

### File Size and Complexity:
- HTML: ~10KB (180 lines)
- CSS: ~5.9KB (293 lines)
- JavaScript: ~21.8KB (539 lines)
- Total: ~37.7KB across 3 main files

This documentation provides a complete reference for understanding, maintaining, and extending the Image Color Fader application.
